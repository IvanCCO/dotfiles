" Anota√ß√µes  ===============================
" Record mode =  q-w
" paste record mode @w
" Splita a tela verticalmente: <c-w> v
" Para incrementar -> visual block os numeros -> g control + a

" Para colocar a cria√ß√£o de classe quando for Kotlin √© ->
" nmap <leader>nc :action Kotlin.NewFile<CR>
let $LANG='en'
let g:lasttab = 1
let mapleader = " "
set langmenu=en
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
set clipboard=unnamed,unnamedplus,ideaput
" Enable filetype plugins
filetype plugin on
filetype indent on
" Set to auto read when a file is changed from the outside
set autoread
au FocusGained,BufEnter * checktime
" Always show current position
set ruler
" Height of the command bar
set cmdheight=1
" A buffer becomes hidden when it is abandoned
set hid
" Configure backspace so it acts as it should act
set backspace=eol,start,indent
" Ignore case when searching
set ignorecase
" When searching try to be smart about cases
set smartcase
" Highlight search results
set hlsearch
" Makes search act like search in modern browsers
set incsearch
" Don't redraw while executing macros (good performance config)
set lazyredraw
" For regular expressions turn magic on
set magic
" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2
" No annoying sound on errors
set belloff=all
set novisualbell
set noerrorbell
set t_vb=
set vb t_vb=
set tm=500
set commentary
set surround
set ideajoin
" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8
" Use Unix as the standard file type
set ffs=unix,dos,mac
set nobackup
set nowb
set noswapfile
set expandtab
" Be smart when using tabs ;)
set smarttab
" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4
" Linebreak on 500 characters
set lbr
set tw=500
set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines
set multiple-cursors
" Set 7 lines to the cursor - when moving vertically using j/k
set so=7
" Turn on the Wild menu
set wildmenu
" Ignore compiled files
set wildignore=*.o,*~,*.pyc
" Add a bit extra margin to the left
set foldcolumn=1
syntax enable
" Set regular expression engine automatically
set regexpengine=0
set laststatus=2
" Format the status line
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l\ \ Column:\ %c

""""""""""""""""""""""""""""""
" =>  Normal Mode
""""""""""""""""""""""""""""""
nmap 0 ^
nmap Y y$
nnoremap L $
nnoremap H ^

" Fast saving
nmap <leader>w :w!<cr>
" Disable highlight when <leader><cr> is pressed
nmap <silent> <leader><cr> :noh<cr>
" Close all the buffers
nmap <leader>tc :tabclose<cr>
nmap <leader>to :tabonly<cr>
""""""""""""""""""""""""""""""
" =>  Actions comands - Normal mode
""""""""""""""""""""""""""""""
" Useful mappings for managing tabs
nnoremap <leader>l :action RecentFiles<CR>

" Move line up and down using control
" TODO: See how to use command or option on mac
nnorempap <M-j> :action MoveLineDown<CR>
nnorempap <M-k> :action MoveLineDown<CR>



nmap \b :action ToggleLineBreakPoint<CR>
nmap \d :action Debug<CR>
nmap \c :action CommentByLineComment<CR>
nmap \z :action EditorToggleUseSoftWraps<CR>
nmap / :action Find<CR>
nmap <leader>/ :action FindInPath<CR>
nmap <leader>nf :action NewFile<CR>
nmap <leader>pi :action ParameterInfo<CR>
nmap <leader>e :action ShowErrorDescription<CR>
nmap <leader>gr :action Generate<CR>
nmap <leader>rr :action RenameElement<CR>
nmap <leader>nc :action Kotlin.NewFile<CR>
nmap <leader>fm :action ReformatCode<CR>
nmap <leader>ev :action EvaluateExpression<CR>
nmap <leader>gd :action GotoImplementation<CR>

""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>
vnoremap x _x

" Move selected up and down
xnorempap <A-j> : action MoveLineDown<CR>

""""""""""""""""""""""""""""""
" =>  Actions comands - Visual mode
""""""""""""""""""""""""""""""
vnoremap a :action $SelectAll<CR>

"""""""""""""""""""""""""""""
" => Insert Mode
""""""""""""""""""""""""""""""

" Mapear o home e end no modo de insercao al√©m de colocar para dar pra usar as arrow keys com modo insercao usando esc
inoremap <C-a> <C-o>^
inoremap <c-s> <End>
inoremap <C-x> <Right>
inoremap <C-z> <Left>
inoremap <C-q> <Up>
inoremap <C-c> <Down>
" Mapear control j e config para ficar funcionando com control j k
inoremap <C-j> <C-n>
inoremap <C-k> <C-p>
" Conseguir ver o que o parametro esta pedindo
inoremap <C-p> :action ParameterInfo<CR>

""""""""""""""""""""""""""""""
" =>  Actions comands - Visual mode
""""""""""""""""""""""""""""""
" Helper functions
if has("win16") || has("win32")
set wildignore+=.git\*,.hg\*,.svn\*
else
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

" :W sudo saves the file
" (useful for handling the permission-denied error)
command! W execute 'w !sudo tee % > /dev/null' <bar> edit!

" Properly disable sound on errors on MacVim
if has("gui_macvim")
autocmd GUIEnter * set vb t_vb=
endif

" Enable 256 colors palette in Gnome Terminal
if $COLORTERM == 'gnome-terminal'
set t_Co=256
endif

try
colorscheme desert
catch
endtry

" Set extra options when running in GUI mode
if has("gui_running")
set guioptions-=T
set guioptions-=e
set t_Co=256
set guitablabel=%M\ %t
endif

au TabLeave * let g:lasttab = tabpagenr()

" Specify the behavior when switching between buffers
try
set switchbuf=useopen,usetab,newtab
set stal=2
catch
endtry

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

if has("mac") || has("macunix")
nmap <D-j> <M-j>
nmap <D-k> <M-k>
vmap <D-j> <M-j>
vmap <D-k> <M-k>
endif

" Delete trailing white space on save, useful for some filetypes ;)
fun! CleanExtraSpaces()
let save_cursor = getpos(".")
let old_query = getreg('/')
silent! %s/\s\+$//e
call setpos('.', save_cursor)
call setreg('/', old_query)
endfun

if has("autocmd")
autocmd BufWritePre *.txt,*.js,*.py,*.wiki,*.sh,*.coffee :call CleanExtraSpaces()
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Returns true if paste mode is enabled
function! HasPaste()
if &paste
return 'PASTE MODE  '
endif
return ''
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
let l:currentBufNum = bufnr("%")
let l:alternateBufNum = bufnr("#")

```
if buflisted(l:alternateBufNum)
    buffer #
else
    bnext
endif

if bufnr("%") == l:currentBufNum
    new
endif

if buflisted(l:currentBufNum)
    execute("bdelete! ".l:currentBufNum)
endif

```

endfunction

function! CmdLine(str)
call feedkeys(":" . a:str)
endfunction

function! VisualSelection(direction, extra_filter) range
let l:saved_reg = @"
execute "normal! vgvy"

```
let l:pattern = escape(@", "\\\\\\\\/.*'$^~[]")
let l:pattern = substitute(l:pattern, "\\\\n$", "", "")

if a:direction == 'gv'
    call CmdLine("Ack '" . l:pattern . "' " )
elseif a:direction == 'replace'
    call CmdLine("%s" . '/'. l:pattern . '/')
endif

let @/ = l:pattern
let @" = l:saved_reg

```

endfunction

" The end
